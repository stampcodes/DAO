/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface DAOInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addMember"
      | "addProposal"
      | "addShares"
      | "admin"
      | "buyShares"
      | "closeProposal"
      | "delegateVote"
      | "giveShares"
      | "governanceType"
      | "isAdmin"
      | "isMemberOrAdmin"
      | "isProposalApproved"
      | "maxShares"
      | "proposals"
      | "removeMember"
      | "removeShares"
      | "result"
      | "saleActive"
      | "sharePrice"
      | "shares"
      | "toggleSaleStatus"
      | "token"
      | "totalShares"
      | "vote"
      | "withdrawTokens"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "ProposalCreated" | "SharesBought" | "Voted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addMember",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addProposal",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addShares",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "buyShares",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "closeProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "delegateVote",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "giveShares",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "governanceType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isMemberOrAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isProposalApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "maxShares", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeMember",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeShares",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "result",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "saleActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sharePrice",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "shares", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "toggleSaleStatus",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalShares",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTokens",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "addMember", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addShares", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyShares", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "closeProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegateVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "giveShares", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "governanceType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isMemberOrAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isProposalApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxShares", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "result", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "saleActive", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sharePrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "shares", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toggleSaleStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTokens",
    data: BytesLike
  ): Result;
}

export namespace ProposalCreatedEvent {
  export type InputTuple = [proposalId: BigNumberish, description: string];
  export type OutputTuple = [proposalId: bigint, description: string];
  export interface OutputObject {
    proposalId: bigint;
    description: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SharesBoughtEvent {
  export type InputTuple = [buyer: AddressLike, amount: BigNumberish];
  export type OutputTuple = [buyer: string, amount: bigint];
  export interface OutputObject {
    buyer: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VotedEvent {
  export type InputTuple = [
    voter: AddressLike,
    proposalId: BigNumberish,
    voteFor: boolean
  ];
  export type OutputTuple = [
    voter: string,
    proposalId: bigint,
    voteFor: boolean
  ];
  export interface OutputObject {
    voter: string;
    proposalId: bigint;
    voteFor: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DAO extends BaseContract {
  connect(runner?: ContractRunner | null): DAO;
  waitForDeployment(): Promise<this>;

  interface: DAOInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addMember: TypedContractMethod<
    [newMember: AddressLike],
    [void],
    "nonpayable"
  >;

  addProposal: TypedContractMethod<
    [proposalId: BigNumberish, description: string],
    [void],
    "nonpayable"
  >;

  addShares: TypedContractMethod<
    [howManyShares: BigNumberish],
    [void],
    "nonpayable"
  >;

  admin: TypedContractMethod<[], [string], "view">;

  buyShares: TypedContractMethod<
    [amountOfTokens: BigNumberish],
    [void],
    "nonpayable"
  >;

  closeProposal: TypedContractMethod<
    [proposalId: BigNumberish],
    [void],
    "nonpayable"
  >;

  delegateVote: TypedContractMethod<
    [proposalId: BigNumberish, _delegate: AddressLike],
    [void],
    "nonpayable"
  >;

  giveShares: TypedContractMethod<
    [userAddress: AddressLike, amountOfShares: BigNumberish],
    [void],
    "nonpayable"
  >;

  governanceType: TypedContractMethod<[], [bigint], "view">;

  isAdmin: TypedContractMethod<[user: AddressLike], [boolean], "view">;

  isMemberOrAdmin: TypedContractMethod<[user: AddressLike], [boolean], "view">;

  isProposalApproved: TypedContractMethod<
    [proposalId: BigNumberish],
    [boolean],
    "view"
  >;

  maxShares: TypedContractMethod<[], [bigint], "view">;

  proposals: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        whoMadeTheProposal: string;
        description: string;
        count: bigint;
        proCount: bigint;
        againstCount: bigint;
        weightedVoteCount: bigint;
        weightedProCount: bigint;
        weightedAgainstCount: bigint;
        deadline: bigint;
      }
    ],
    "view"
  >;

  removeMember: TypedContractMethod<
    [removedMember: AddressLike],
    [void],
    "nonpayable"
  >;

  removeShares: TypedContractMethod<
    [howManyShares: BigNumberish],
    [void],
    "nonpayable"
  >;

  result: TypedContractMethod<
    [proposalId: BigNumberish],
    [[bigint, bigint, bigint, bigint]],
    "view"
  >;

  saleActive: TypedContractMethod<[], [boolean], "view">;

  sharePrice: TypedContractMethod<[], [bigint], "view">;

  shares: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  toggleSaleStatus: TypedContractMethod<[], [void], "nonpayable">;

  token: TypedContractMethod<[], [string], "view">;

  totalShares: TypedContractMethod<[], [bigint], "view">;

  vote: TypedContractMethod<
    [proposalId: BigNumberish, voteFor: boolean],
    [void],
    "nonpayable"
  >;

  withdrawTokens: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addMember"
  ): TypedContractMethod<[newMember: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addProposal"
  ): TypedContractMethod<
    [proposalId: BigNumberish, description: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addShares"
  ): TypedContractMethod<[howManyShares: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "buyShares"
  ): TypedContractMethod<[amountOfTokens: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "closeProposal"
  ): TypedContractMethod<[proposalId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "delegateVote"
  ): TypedContractMethod<
    [proposalId: BigNumberish, _delegate: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "giveShares"
  ): TypedContractMethod<
    [userAddress: AddressLike, amountOfShares: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "governanceType"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isAdmin"
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isMemberOrAdmin"
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isProposalApproved"
  ): TypedContractMethod<[proposalId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "maxShares"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "proposals"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        whoMadeTheProposal: string;
        description: string;
        count: bigint;
        proCount: bigint;
        againstCount: bigint;
        weightedVoteCount: bigint;
        weightedProCount: bigint;
        weightedAgainstCount: bigint;
        deadline: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "removeMember"
  ): TypedContractMethod<[removedMember: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeShares"
  ): TypedContractMethod<[howManyShares: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "result"
  ): TypedContractMethod<
    [proposalId: BigNumberish],
    [[bigint, bigint, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "saleActive"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "sharePrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "shares"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "toggleSaleStatus"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalShares"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "vote"
  ): TypedContractMethod<
    [proposalId: BigNumberish, voteFor: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawTokens"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "ProposalCreated"
  ): TypedContractEvent<
    ProposalCreatedEvent.InputTuple,
    ProposalCreatedEvent.OutputTuple,
    ProposalCreatedEvent.OutputObject
  >;
  getEvent(
    key: "SharesBought"
  ): TypedContractEvent<
    SharesBoughtEvent.InputTuple,
    SharesBoughtEvent.OutputTuple,
    SharesBoughtEvent.OutputObject
  >;
  getEvent(
    key: "Voted"
  ): TypedContractEvent<
    VotedEvent.InputTuple,
    VotedEvent.OutputTuple,
    VotedEvent.OutputObject
  >;

  filters: {
    "ProposalCreated(uint256,string)": TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;
    ProposalCreated: TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;

    "SharesBought(address,uint256)": TypedContractEvent<
      SharesBoughtEvent.InputTuple,
      SharesBoughtEvent.OutputTuple,
      SharesBoughtEvent.OutputObject
    >;
    SharesBought: TypedContractEvent<
      SharesBoughtEvent.InputTuple,
      SharesBoughtEvent.OutputTuple,
      SharesBoughtEvent.OutputObject
    >;

    "Voted(address,uint256,bool)": TypedContractEvent<
      VotedEvent.InputTuple,
      VotedEvent.OutputTuple,
      VotedEvent.OutputObject
    >;
    Voted: TypedContractEvent<
      VotedEvent.InputTuple,
      VotedEvent.OutputTuple,
      VotedEvent.OutputObject
    >;
  };
}
